#include <iostream>
#include <queue>
#include <string>
using namespace std;

class Graph {
    int adj[10][10]{};     // Adjacency matrix
    bool visited[10]{};    // Visited array
    int n;                 // Number of vertices
    string names[10];      // Store names corresponding to IDs

public:
    void create();
    void display();
    void dfs_recursive(int);
    void dfs_non_recursive(int);
    void bfs(int);
    void reset();
};

void Graph::create() {
    cout << "Enter number of users: ";
    cin >> n;
    
    cout << "Enter the name of each user:\n";
    for (int i = 0; i < n; i++) {
        cout << "User " << i << ": ";
        cin >> names[i];
    }

    int edge;
    cout << "\nEnter friendship connections (1 if friends, 0 otherwise):\n";
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << "Is " << names[i] << " (ID " << i << ") friends with " 
                 << names[j] << " (ID " << j << ")? (1/0): ";
            cin >> edge;
            adj[i][j] = edge;
        }
    }
}

void Graph::display() {
    cout << "\nAdjacency Matrix:\n   ";
    for (int i = 0; i < n; i++) {
        cout << i << " ";
    }
    cout << "\n";
    for (int i = 0; i < n; i++) {
        cout << i << ": ";
        for (int j = 0; j < n; j++) {
            cout << adj[i][j] << " ";
        }
        cout << "\n";
    }

    cout << "\nUser IDs:\n";
    for (int i = 0; i < n; i++) {
        cout << i << ": " << names[i] << "\n";
    }
}

void Graph::dfs_recursive(int start) {
    cout << names[start] << " ";
    visited[start] = true;
    for (int j = 0; j < n; j++) {
        if (adj[start][j] && !visited[j])
            dfs_recursive(j);
    }
}

void Graph::dfs_non_recursive(int start) {
    int stack[10], top = -1;
    stack[++top] = start;

    while (top != -1) {
        int curr = stack[top--];
        if (!visited[curr]) {
            cout << names[curr] << " ";
            visited[curr] = true;
        }
        for (int j = n - 1; j >= 0; j--) {
            if (adj[curr][j] && !visited[j])
                stack[++top] = j;
        }
    }
}

void Graph::bfs(int start) {
    queue<int> q;
    visited[start] = true;
    q.push(start);

    while (!q.empty()) {
        int curr = q.front(); q.pop();
        cout << names[curr] << " ";
        for (int j = 0; j < n; j++) {
            if (adj[curr][j] && !visited[j]) {
                visited[j] = true;
                q.push(j);
            }
        }
    }
}

void Graph::reset() {
    for (int i = 0; i < 10; i++) visited[i] = false;
}

int main() {
    Graph g;
    g.create();
    g.display();

    cout << "\nRecursive DFS from ID 0: ";
    g.reset();
    g.dfs_recursive(0);

    cout << "\nNon-Recursive DFS from ID 0: ";
    g.reset();
    g.dfs_non_recursive(0);

    cout << "\nBFS from ID 0: ";
    g.reset();
    g.bfs(0);

    return 0;
}
